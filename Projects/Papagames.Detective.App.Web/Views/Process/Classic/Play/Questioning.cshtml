@{
    // >> Process > View > Classic > Questioning ***
    @Questioning()
}
@using Papagames.Detective.Core.Game
@model Papagames.Detective.App.Web.Models.ProcessModel

@functions
{

    private IList<int> QuestionRespondents()
    {
        return Model.UserActions
            .Where(a => a.Type == Process.UserAction.ActionType.Ask)
            .Select(a => a.Params[0])
            .Distinct()
            .ToList();
    }

    private IList<int> QuestionSubjects(int respondent)
    {
        return Model.UserActions
            .Where(a => a.Type == Process.UserAction.ActionType.Ask && a.Params[0] == respondent)
            .Select(a => a.Params[1])
            .Distinct()
            .ToList();
    }

    private static string MemberNamesDelimiter(int i, int n)
    {
        return n == 1 ? "" : i == n - 2 ? " or " : i < n - 1 ? ", " : "";
    }

}

@helper Questioning()
{
    if (ViewBag.Respondent == null)
    {
        @SelectRespondent()
    }
    else
    {
        @SelectSubject(ViewBag.Respondent)
    }
}


@helper SelectRespondent()
{
    <div class="det-today">
        <div class="det-today-day det-answers-color det-questioning">Inquire:</div>
        <div class="det-today-info">
            <div class="det-questioning det-answers-color">
                @{
                    var respondents = QuestionRespondents();
                    var i = 0;
                    foreach (var num in respondents)
                    {
                        @RespondentLink(num, MemberNamesDelimiter(i++, respondents.Count))
                    }
                }
            </div>
        </div>
    </div>
}

@helper RespondentLink(int num, string suffix)
{
    @BuildLink(
        ProcessView.MemberName(num),
        Url.Action("ClassicPlay", "Process", new {id = Model.Id, respondent = num}),
        suffix
        )
}

@helper SelectSubject(int respondent)
{
    <div class="det-today">
        <div class="det-today-day det-answers-color det-questioning">Inquire:</div>
        <div class="det-today-info">
            <div class="det-questioning det-answers-color">
                ask @ProcessView.MemberName(respondent) about
                @{
                    var subjects = QuestionSubjects(respondent);
                    var i = 0;
                    foreach (var num in subjects)
                    {
                        @AskActionLink(respondent, num, MemberNamesDelimiter(i++, subjects.Count))
                    }
                }
            </div>
        </div>
    </div>
}

@helper AskActionLink(int respondent, int subject, string suffix)
{
    const int actionType = (int)Process.UserAction.ActionType.Ask;
    @BuildLink(
        ProcessView.MemberName(subject),
        Url.Action("ClassicPlay", "Process", new {id = Model.Id, actionType, respondent, subject}),
        suffix
        )
}

@helper BuildLink(string text, string href, string suffix)
{
    var link = string.Format("<a class='{0}' href='{1}'>{2}</a>{3}",
        "det-questioning det-answers-color",
        href,
        text,
        suffix);
    var htmlLink = new MvcHtmlString(link);
    @htmlLink
}