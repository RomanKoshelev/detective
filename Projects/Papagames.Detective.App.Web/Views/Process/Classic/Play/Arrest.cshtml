@{
    // >> Process > View > Classic > Arrest ***
    @Arrest()
}
@using Papagames.Detective.App.Web.Models
@using Papagames.Detective.Core.Game
@model ProcessModel

@functions
{

    private int? Face
    {
        get { return ViewBag.Face; }
    }

    private bool ArrestIsEnabled()
    {
        return Model.State == State.Arrest && Model.UserActionIsEnabled(Process.UserAction.ActionType.Arrest);
    }

    private bool EarlyArrestIsEnabled()
    {
        return Model.UserActionIsEnabled(Process.UserAction.ActionType.EarlyArrest);
    }

    private bool ContinueIsEnabled()
    {
        return Model.UserActionIsEnabled(Process.UserAction.ActionType.Continue);
    }
}

@helper Arrest()
{
    @EarlyArrestButton()
    @Hint()
    @ArrestButton()
    @Result()
    @ContinueButton()
}


@helper EarlyArrestButton()
{
    if (EarlyArrestIsEnabled() && Face != null)
    {
        @Record(BoardView.Button(
            "Arrest " + ProcessView.MemberName(Face),
                 BoardView.ButtonEarlyArrestClass,
            ProcessView.EarlyArrestActionUrl((int) Face)))
    }
}

@helper ArrestButton()
{
    if (ArrestIsEnabled() && Face != null)
    {
        @Record(BoardView.Button(
            "Arrest " + ProcessView.MemberName(Face),
            BoardView.ButtonArrestClass,
            ProcessView.ArrestActionUrl((int) Face)))
    }
}

@helper ContinueButton()
{
    if (Model.State == State.CheckArrest && ContinueIsEnabled())
    {
        @BoardView.Record(
            BoardView.Button(
                "Continue",
                BoardView.ButtonContinueClass,
                ProcessView.ContinueActionUrl()),
            BoardView.ArrestClass)
    }
}


@helper Hint()
{
    if (ArrestIsEnabled() && !ProcessView.CanArrest(Face))
    {
        @Record(BoardView.HintMemberVariants(
            "Select suspicious member:",
            ProcessView.ArrestSuspects()
            ))
    }
}

@helper Result()
{
    if (Model.State == State.CheckArrest)
    {
        @BoardView.Record(
            ArrestTitle(),
            ResultSections(),
            BoardView.ArrestClass)
    }
}

@helper ResultSections()
{
    @BoardView.RecordInfoSection(ResultSectionPrisoner())
    @BoardView.RecordInfoSection(ResultSectionPrisonerRole())
}

@helper ResultSectionPrisoner()
{
    @:You have arrested @BoardView.MemberLink(Model.TodayPrisoner)
}
@helper ResultSectionPrisonerRole()
{
    @:@BoardView.MemberLink(Model.TodayPrisoner) was @Model.TodayPrisoner.Role
}

@helper ArrestTitle()
{ @BoardView.Text(Model.State == State.Arrest || Model.State == State.CheckArrest ? "Arrest:" : "") }

@helper Record(HelperResult rec)
{
    @BoardView.Record(
        ArrestTitle(),
        rec,
        BoardView.ArrestClass)
}