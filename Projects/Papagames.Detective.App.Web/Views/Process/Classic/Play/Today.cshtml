@{
    // >> Process > View > Classic > Today *
    @Today()
}
@using Papagames.Detective.Core.Game
@model Papagames.Detective.App.Web.Models.ProcessModel

@functions
{

    private string Victim()
    {
        return Model.TodayVictim.Name;
    }

    private string MurderNumDescription()
    {
        if (Model.MurderersLeft == null)
            return "a murderer";
        if (Model.MurderersLeft == 1)
            return "1 murderer";
        return string.Format("one of {0} murderers", Model.MurderersLeft);
    }

    private string InnocentNumDescription()
    {
        if (Model.InnocentsLeft == null)
            return "Guiltness members";
        if (Model.InnocentsLeft == 1)
            return "A guiltness member";
        return string.Format("Some of {0} guiltless members", Model.InnocentsLeft);
    }

    private string EvidencesNumDescription()
    {
        if (Model.TodayEvidencesNum == null)
            return "some evidences";
        if (Model.InnocentsLeft == 1)
            return "an evidence";
        return string.Format("{0} evidences", Model.TodayEvidencesNum);
    }

}

@helper Today()
{
    switch (Model.State)
    {
        case State.Questioning:
        case State.Arrest:
        case State.CheckArrest:
            @NightEvents()
            break;
    }
}

@helper MurderAndEvidences()
{
    <div class="det-today-section-text">
        @Victim() was killed by @MurderNumDescription() last night
    </div>
    <div class="det-today-section-text">
        @InnocentNumDescription() made @EvidencesNumDescription()
    </div>
}

@helper NightEvents()
{
    @GameLog.RecordToday(MurderAndEvidences())
}
