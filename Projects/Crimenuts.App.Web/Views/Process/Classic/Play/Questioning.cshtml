@{
    // >> Process | View | Classic | Questioning
    @Questioning()
}
@using Crimenuts.App.Web.Models
@using Crimenuts.Core.Game
@model ProcessModel

@functions
{

    private int? Face
    {
        get { return ViewBag.Face; }
    }

    private string SelectedFaceClass(int num)
    {
        return num == Face ? BoardView.HighlightClass : "";
    }

}

@helper Questioning()
{
    @BoardView.Record(Answers(), BoardView.DetectiveClass)
    if (Model.State == State.Questioning)
    {
        @BoardView.Record(Hint(), BoardView.DetectiveClass)
    }
}

@helper Answers()
{
    if (Model.TodayAnswers().Count == 0)
    {
        @Localization.Text("Game:Questioning:No answers yet")
    }
    else
    {
        foreach (var answer in Model.TodayAnswers())
        {
            @Answer(answer, SelectedFaceClass(answer.Agent.Number))
        }
    }
}

@helper Answer(AnswerModel answer, string currentMemberClass)
{
    <div class="@currentMemberClass">
        @BoardView.MemberLink(answer.Agent)
        &mdash;
        @BoardView.SubjectLink(answer.Subject)
        is
        @answer.Value.Verbal()
    </div>
}

@helper Hint()
{
    @( !ProcessView.CanAsk(Face)
           ? HintRespondents()
           : HintSubjects((int) Face))
}

@helper HintRespondents()
{
    @BoardView.HintMemberVariants(
        Shared.Text(Localization.Text("Game:Questioning:Ask")+":"),
        ProcessView.QuestioningRespondents(),
        BoardView.MemberLink,
        additionalVariantsFunc: AutoQuestioning
        )
}

@helper HintSubjects(int respondent)
{
    @BoardView.HintSubjectVariants(
        HintSubjectTitle(respondent),
        respondent,
        ProcessView.QuestioningSubjects(respondent),
        AskActionLink
        )
}

@helper HintSubjectTitle(int respondent)
{
    @Localization.Text("Game:Questioning:Ask")
    @:
    @BoardView.RespondentLink(ProcessView.Member(respondent)) 
    @Localization.Text("Game:Questioning:About")
}

@helper AskActionLink(MemberModel respondent, MemberModel subject, string suffix = " ")
{
    @Shared.Link(
        Localization.Text(subject.Name),
        BoardView.MemberLinkClass,
        ProcessView.AskActionUrl(respondent.Number, subject.Number)
        )@suffix
}

@helper AutoQuestioning()
{
    if (Model.Options.AutoQuestioningIsEnabled
        && ProcessView.QuestioningRespondents().Count >= 2
        && (Face == null || ProcessView.QuestioningSubjects((int) Face).Count == 0))
    {
           @(Localization.Format(" {0} ", "or")) @Shared.Link(Localization.Text("Game:Questioning:Auto"), BoardView.MemberLinkClass, ProcessView.AutoAskActionUrl())
    }
}