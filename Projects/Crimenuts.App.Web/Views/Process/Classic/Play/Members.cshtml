@using Crimenuts.Core.Game
@model Crimenuts.App.Web.Models.ProcessModel
@{
    // >> Process > View > Classic > Members ***
    @Members((int) ViewBag.First, (int) ViewBag.Last)
}

@functions
{

    // ===================================================================================== []
    // MemberFaceClass
    private string MemberFaceClass(int num)
    {
        var member = ProcessView.Member(num);

        if (Model.State == State.Finished && member.IsActive)
        {
            return member.IsOpenMurderer
                ? " det-member-face-active-murderer"
                : member.IsOpenInnocent
                    ? " det-member-face-active-innocent"
                    : "";            
        }

        if (member.IsActive)
        {
            return num == Face
                ? " det-member-face-active-primary"
                : " det-member-face-active-secondary";
        }

        if (member.IsOpenMurderer)
        {
            return num == Face ? " det-member-face-inactive-murderer-selected" : " det-member-face-inactive-murderer";
        }
        if (member.IsOpenInnocent)
        {
            return num == Face ? " det-member-face-inactive-innocent-selected" : " det-member-face-inactive-innocent";
        }
        return "";            
    }

    // ===================================================================================== []
    // MemberFaceEmotionClass
    private string MemberFaceEmotionClass(int num)
    {
        return ProcessView.MemberIsAlive(num) ? " det-member-face-text-alive det-vertical" : " det-member-face-text-dead";
    }

    private string FaceTextClass(int num)
    {
        return string.Format("{0} {1}", MemberFaceEmotionClass(num), "det-member-face-link");
    }

    private string EmotionMarker(int num, int? subj)
    {
        switch (ProcessView.MemberEmotion(num, subj))
        {
            case Emotion.Happy:
                return ":)";
            case Emotion.Sad:
                return ":(";
            case Emotion.Indifferent:
                return ":|";
            default:
                return "ERROR";
        }
    }

    private MvcHtmlString MemberFace(int num, int? subj)
    {
        return new MvcHtmlString(
            ProcessView.MemberIsAlive(num) ?
                EmotionMarker(num, subj) :
                "x x<br>__"
            );
    }

    private bool FaceIsLinked(int num)
    {
        if (Face == num)
            return false;

/*        switch (Model.State)
        {
            case State.Questioning:
                return ProcessView.MemberIsActive(num);
            case State.Arrest:
                return ProcessView.MemberIsActive(num);
        }*/
        return true;
    }

    private int? Face
    {
        get { return ViewBag.Face; }
    }

    private bool SideIsTop
    {
        get { return ViewBag.SideIsTop; }
    }

    private string MemberAskedClass(int num)
    {
        return ProcessView.IsAsked(num)
            ? SideIsTop ? " det-member-face-asked-top" : " det-member-face-asked-bottom"
            : "";
    }

}

@helper Members(int first, int last)
{
    <nav>
        <ul>
            @for (var i = first; i <= last; i++)
            {
                <li class="det-member">
                    @Member(i)
                </li>
            }
        </ul>
    </nav>
}

@helper Member(int i)
{
    <div class="det-member-cell-aligment" align="center">
        <div class="det-member-cell-content" align="center">
            @if (ProcessView.MemberExists(i))
            {
                if (SideIsTop && ProcessView.MemberIsActive(i) || !SideIsTop && !ProcessView.MemberIsActive(i))
                {
                    @FaceIndent()
                    @FaceFrame(i)
                }
                else
                {
                    @FaceFrame(i)
                    @FaceIndent()
                }
            }
        </div>
    </div>
}

@helper FaceFrame(int num)
{
    <div class="det-member-cell-circle-face @MemberFaceClass(num) @MemberAskedClass(num)">
        @(FaceIsLinked(num) ? FaceLink(num) : FaceText(num))
    </div>
}

@helper FaceIndent()
{
    <div class="det-member-cell-content-indent">
    </div>
}

@helper FaceLink(int num)
{
    <a class="@FaceTextClass(num)" href="@ProcessView.MemberFaceUrl(num)">@MemberFace(num, ViewBag.Face)</a>
}

@helper FaceText(int num)
{
    <span class="@FaceTextClass(num)" >
        @MemberFace(num, ViewBag.Face)
    </span>
}