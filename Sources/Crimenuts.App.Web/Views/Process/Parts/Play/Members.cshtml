@using Crimenuts.Core.Game
@using Crimenuts.Core.Game.Enums
@model  Crimenuts.App.Web.Models.ProcessModel 
@{
    @Members( ( int ) ViewBag.First, ( int ) ViewBag.Last )
}

@functions
{

    // ===================================================================================== []
    // MemberFaceClass
    private string MemberFaceClass( int num )
    {
        var member = ProcessView.Member( num );

        if( Model.State == State.Finished && member.IsActive ) {
            return member.IsOpenMurderer
                ? " cn-member-face-active-murderer"
                : member.IsOpenInnocent
                    ? " cn-member-face-active-innocent"
                    : "";
        }
        if( member.IsActive ) {
            return num == Face
                ? " cn-member-face-active-primary"
                : " cn-member-face-active-secondary";
        }

        if( member.IsOpenMurderer ) {
            return num == Face ? " cn-member-face-inactive-murderer-selected" : " cn-member-face-inactive-murderer";
        }
        if( member.IsOpenInnocent ) {
            return num == Face ? " cn-member-face-inactive-innocent-selected" : " cn-member-face-inactive-innocent";
        }
        return "";
    }

    // ===================================================================================== []
    // MemberFaceEmotionClass
    private string MemberFaceEmotionClass( int num )
    {
        return ProcessView.MemberIsAlive( num ) ? " cn-member-face-text-alive cn-vertical" : " cn-member-face-text-dead";
    }

    // --------------------------------------------------------[]
    private string FaceTextClass( int num )
    {
        return string.Format( "{0} {1}", MemberFaceEmotionClass( num ), "cn-member-face-link" );
    }

    // --------------------------------------------------------[]
    private string EmotionMarker( int num, int? subj )
    {
        switch( ProcessView.MemberEmotion( num, subj ) ) {
            case Emotion.Happy :
                return ":)";
            case Emotion.Sad :
                return ":(";
            case Emotion.Indifferent :
                return ":|";
            default :
                return "ERROR";
        }
    }

    private MvcHtmlString MemberFace( int num, int? subj )
    {
        return new MvcHtmlString(
            ProcessView.MemberIsAlive( num ) ?
                EmotionMarker( num, subj ) :
                "x x<br>__"
            );
    }

    private bool FaceIsLinked( int num )
    {
        if( Face == num ) {
            return false;
        }
        return true;
    }

    private int? Face
    {
        get { return ViewBag.Face; }
    }

    private bool SideIsTop
    {
        get { return ViewBag.SideIsTop; }
    }

    private string MemberAskedClass( int num )
    {
        return ProcessView.IsAsked( num )
            ? SideIsTop ? " cn-member-face-asked-top" : " cn-member-face-asked-bottom"
            : "";
    }

}

@helper Members( int first, int last )
{
    <nav>
        <ul>
            @for( var i = first; i <= last; i++ ) {
                <li class="cn-member">
                    @Member( i )
                </li>
            }
        </ul>
    </nav>
}

@helper Member( int i )
{
    <div class="cn-member-cell-aligment" align="center">
        <div class="cn-member-cell-content" align="center">
            @if( ProcessView.MemberExists( i ) ) {
                if( SideIsTop && ProcessView.MemberIsActive( i ) || !SideIsTop && !ProcessView.MemberIsActive( i ) ) {
                    @FaceIndent()
                    @FaceFrame( i )
                } else {
                    @FaceFrame( i )
                    @FaceIndent()
                }
            }
        </div>
    </div>
}

@*
// ===================================================================================== []
// Face
*@
@helper FaceFrame( int num )
{
    var member = ProcessView.Member( num );

    <div class="cn-member-cell-circle-face @MemberFaceClass( num ) @MemberAskedClass( num )">
        @(FaceIsLinked( num ) ? FaceLink( num ) : FaceText( num ))


        @*
        @Shared.ImageHeight("Person", new {world = Model.Case.WorldName, name = member.Name},150)
*@

    </div>
}
@*
// --------------------------------------------------------[]
*@
@helper FaceIndent()
{
    <div class="cn-member-cell-content-indent">
    </div>
}
@*
// --------------------------------------------------------[]
*@
@helper FaceLink( int num )
{
    <a class="@FaceTextClass( num )" href="@ProcessView.MemberFaceUrl( num )">@MemberFace( num, ViewBag.Face )</a>
}
@*
// --------------------------------------------------------[]
*@
@helper FaceText( int num )
{
    <span class="@FaceTextClass( num )" >
        @MemberFace( num, ViewBag.Face )
    </span>
}

@*
// ===================================================================================== []
// EOF
*@